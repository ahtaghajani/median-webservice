{"version":3,"sources":["components/header.js","components/request.js","components/fetchRequest.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","Request","req","style","maxWidth","id","JSON","stringify","FetchRequest","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","populateRowsWithData","state","pageContent","map","request","components_request","dateString","dateTime","rawContent","contentMedianByLabel","activePage","totalPages","itemsCountPerPage","totalItemsCount","handlePageChange","bind","assertThisInitialized","fetchURL","page","_this2","axios","get","concat","then","response","data","size","totalElements","setState","mappedContent","content","Date","toGMTString","objectSpread","console","log","pageNumber","Pagination_default","hideNavigation","pageRangeDisplayed","itemClass","linkClass","onChange","React","Component","App","header","fetchRequest","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.03f12209.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = () => {\r\n\r\n  return (\r\n    <div className=\"jumbotron \">\r\n      <div className=\"container \">\r\n        <h1 className=\"display-4 \">React Pagination Demo</h1>\r\n        <p className=\"lead\">Itâ€™s important to limit the amount of data queried by your API in a request.</p>\r\n      </div>\r\n    </div>\r\n    );\r\n  };\r\n\r\n  export default Header;\r\n","import React from 'react';\r\n\r\n\r\nfunction Request (req) {\r\n\r\n  let styles = {\r\n    maxWidth: '700px'\r\n  };\r\n\r\n\r\n  return (\r\n      <div className=\"card border-dark bg-light text-dark text-center p-3 mb-3 ml-5 mr-5\" style={styles}>\r\n        <div className=\"card-header\">\r\n            <h2>{req.id}</h2>\r\n            {JSON.stringify(req)}\r\n        </div>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default Request;\r\n","import React from 'react';\r\nimport axios from 'axios';\r\nimport Pagination from \"react-js-pagination\";\r\nimport Request  from './request.js';\r\n\r\nclass FetchRequest extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      pageContent: [],\r\n      activePage:1,\r\n      totalPages: null,\r\n      itemsCountPerPage:null,\r\n      totalItemsCount:null\r\n    };\r\n    this.handlePageChange = this.handlePageChange.bind(this);\r\n    this.fetchURL = this.fetchURL.bind(this);\r\n  }\r\n\r\n  fetchURL(page) {\r\n\r\n    axios.get(`http://localhost:8080/requests?page=${page-1}&size=5`)\r\n      .then( response => {\r\n\r\n          const totalPages = response.data.totalPages;\r\n          const itemsCountPerPage = response.data.size;\r\n          const totalItemsCount = response.data.totalElements;\r\n\r\n          this.setState({totalPages: totalPages})\r\n          this.setState({totalItemsCount: totalItemsCount})\r\n          this.setState({itemsCountPerPage: itemsCountPerPage})\r\n\r\n          const content = response.data.content;\r\n\r\n          const mappedContent = content.map(request => {\r\n\r\n            var timestamp = new Date(request.dateTime)\r\n            var dateString = timestamp.toGMTString()\r\n            return {\r\n                ...request, dateString\r\n              }\r\n            });\r\n\r\n            this.setState({pageContent: mappedContent});\r\n            console.log(mappedContent);\r\n            console.log(this.state.activePage);\r\n            console.log(this.state.itemsCountPerPage);\r\n\r\n        }\r\n      );\r\n    }\r\n\r\n  componentDidMount () {\r\n      this.fetchURL(this.state.activePage)\r\n    }\r\n\r\n  handlePageChange(pageNumber) {\r\n    console.log(`active page is ${pageNumber}`);\r\n    this.setState({activePage: pageNumber})\r\n    this.fetchURL(pageNumber)\r\n\r\n    }\r\n\r\n  populateRowsWithData = () => {\r\n    const requestData = this.state.pageContent.map(request => {\r\n        return <Request\r\n            id = {request.id}\r\n            dateString = {request.dateString}\r\n            dateTime = {request.dateTime}\r\n            rawContent = {request.rawContent}\r\n            contentMedianByLabel = {request.contentMedianByLabel}\r\n          />;\r\n      });\r\n\r\n      return requestData\r\n    }\r\n\r\n  render(){\r\n\r\n    return (\r\n      <div >\r\n\r\n      {this.populateRowsWithData()}\r\n\r\n      <div className=\"d-flex justify-content-center\">\r\n        <Pagination\r\n         hideNavigation\r\n         activePage={this.state.activePage}\r\n         itemsCountPerPage={this.state.itemsCountPerPage}\r\n         totalItemsCount={this.state.totalItemsCount}\r\n         pageRangeDisplayed={10}\r\n         itemClass='page-item'\r\n         linkClass='btn btn-light'\r\n         onChange={this.handlePageChange}\r\n         />\r\n       </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FetchRequest;\r\n","import React, { Component } from 'react';\r\n\r\nimport './App.css';\r\n\r\nimport Header from './components/header.js';\r\nimport FetchRequest  from './components/fetchRequest.js';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Header />\r\n        <div className=\"d-flex justify-content-center\">\r\n          <FetchRequest />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}